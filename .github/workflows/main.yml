name: PR Review with GPTScript

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get PR Details
      id: pr_details
      run: |
        PR_URL=$(jq -r '.pull_request.html_url' $GITHUB_EVENT_PATH)
        PR_NUMBER=$(jq -r '.pull_request.number' $GITHUB_EVENT_PATH)
        PR_FILES=$(jq -r '.pull_request.changed_files' $GITHUB_EVENT_PATH)
        echo "PR_URL=${PR_URL}" >> $GITHUB_ENV
        echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
        echo "PR_FILES=${PR_FILES}" >> $GITHUB_ENV

    - name: Install GPTScript
      run: curl https://get.gptscript.ai/install.sh | sh

    - name: Run GPTScript for Code Review
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        REVIEW_RESULT=$(gptscript codereview.gpt --PR_URL=${{ env.PR_URL }})
        echo "REVIEW_RESULT<<EOF" >> $GITHUB_ENV
        echo "${REVIEW_RESULT}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        if [[ "${REVIEW_RESULT}" == *"Code: Approved"* ]]; then
          echo "::set-output name=review_status::approved"
        elif [[ "${REVIEW_RESULT}" == *"Code: Require Changes"* ]]; then
          echo "::set-output name=review_status::changes_required"
        fi
        echo "REVIEW_RESULT=${REVIEW_RESULT}" >> $GITHUB_ENV

    - name: Set Review Status
      id: review_status
      run: echo "Review status is ${{ steps.run_gptscript.outputs.review_status }}"

    - name: Post Review Comment
      if: steps.run_gptscript.outputs.review_status != 'unknown'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "${{ env.REVIEW_RESULT }}" | gh pr comment ${{ env.PR_NUMBER }} --body "${{ steps.run_gptscript.outputs.review_status }}"

    - name: Set Workflow Status
      if: steps.run_gptscript.outputs.review_status == 'changes_required'
      run: exit 1
